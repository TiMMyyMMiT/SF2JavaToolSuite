name: build-tag-release

on:
  push:
    branches: [main]
    paths:
      - '**/version.properties'
  pull_request:
    branches: [main]
    paths:
      - '**/version.properties'

jobs:
  build-tag-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4.7.1
        with:
          distribution: temurin
          java-version: 17

      - name: Download and install Apache Ant 1.10.14
        run: |
          wget https://downloads.apache.org/ant/binaries/apache-ant-1.10.14-bin.tar.gz
          tar -xzf apache-ant-1.10.14-bin.tar.gz
          sudo mv apache-ant-1.10.14 /opt/ant
          echo "ANT_HOME=/opt/ant" >> $GITHUB_ENV
          echo "/opt/ant/bin" >> $GITHUB_PATH

      - name: Detect changed projects
        id: detect_changes
        shell: bash
        run: |
          git fetch origin ${{ github.event.before }}

          # Find changed version.properties files
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep 'version.properties' || true)

          if [ -z "$changed_files" ]; then
            echo "No version.properties files changed."
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            changed_filepaths=()
            changed_projects=()
            for file in $changed_files; do
              project=$(dirname "$file")
              changed_projects+=("$(basename "$project")")
              changed_filepaths+=("$(basename "$file")")
            done
            echo "Changed files: ${changed_filepaths[@]}"
            echo "Changed projects: ${changed_projects[@]}"

            echo "CHANGED_PROJECTS=${changed_projects[*]}" >> $GITHUB_ENV
            echo "CHANGED_FILES=${changed_filepaths[*]}" >> $GITHUB_ENV
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

      - name: Build projects
        if: steps.detect_changes.outputs.should_run == 'true'
        id: build_projects
        shell: bash
        run: |
          echo "Starting build process..."

          mkdir -p built-jars

          read -a CHANGED_PROJECTS <<< "$CHANGED_PROJECTS"

          # Build changed apps
          echo "Build changed projects"
          for proj in "${CHANGED_PROJECTS[@]}"; do
            echo "Building project $proj..."

            mkdir -p "$proj/build/classes"
            mkdir -p "$proj/dist/lib"
            mkdir -p "$proj/lib"

            ant -v -f "$proj" -Dplatforms.JDK_17.home="$JAVA_HOME" package-for-store

            jar_name=$(basename "$proj")
            if [ -f "$proj/store/${jar_name}.jar" ]; then
              cp "$proj/store/${jar_name}.jar" "built-jars/$jar_name.jar"
            else
              echo "Warning: $proj/store/${jar_name}.jar not found after package-for-store"
            fi
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jars
          path: built-jars/*.jar

      - name: Tag
        if: steps.detect_changes.outputs.should_run == 'true'
        id: tag_and_release
        run: |
          mkdir -p artifacts
          releases=""

          read -a CHANGED_FILES <<< "$CHANGED_FILES"
          for file_path in "${CHANGED_FILES[@]}"; do
            if [ -f "$file_path" ]; then
              dir_path=$(dirname "$file_path")
              folder_name=$(basename "$dir_path")
              version=$(grep '^version:' "$file_path" | cut -d':' -f2 | xargs)
              tag_name="${folder_name}-${version}"
              jar_file="built-jars/${folder_name}.jar"

              echo "==> Processing $folder_name ($version) in $dir_path"
              if [ -f "${jar_file}" ]; then
                # Git tagging
                git config user.name 'GitHub Actions'
                git config user.email 'actions@github.com'

                if git rev-parse "$tag_name" >/dev/null 2>&1; then
                  echo "Tag $tag_name already exists. Skipping tag creation."
                else
                  echo "Creating Git tag $tag_name"
                  git tag "$tag_name"
                  git push origin "$tag_name"
                fi

                # Append to release list
                echo "$tag_name|${jar_file}" >> release_list.txt
              else
                echo "Warning: ${jar_file} not found so tag will not be created"
              fi
            else
              echo "Warning: File $file_path does not exist"
            fi
          done

      - name: Create GitHub Releases
        if: steps.detect_changes.outputs.should_run == 'true'
        run: |
          if [ -f release_list.txt ]; then
            while IFS='|' read -r tag jar_path; do
              echo "Creating release for $tag with artifact $jar_path"
              gh release create "$tag" "$jar_path" --title "$tag" --notes "Automated release for $tag"
            done < release_list.txt
          else
            echo "No releases to create."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to DISASM
        if: steps.detect_changes.outputs.should_run == 'true'
        run: |
          echo "Cloning destination repo..."
          git clone --depth=1 --branch feature/tools_updates https://x-access-token:${{ secrets.SF2DISASM_PUSH_TOKEN }}@github.com/TiMMyyMMiT/SF2DISASM.git target-repo
    
          root_release_file="release.properties"
          if [ ! -f "$root_release_file" ]; then
            echo "release.properties file not found. Skipping push step."
            exit 0
          fi
    
          success_count=0
          skipped_count=0
    
          echo "Processing changed tool projects..."
          for jar_file in built-jars/*.jar; do         
            project_name=$(basename "$jar_file" .jar)    
            dest_path=$(grep -vE '^\s*(#|$)' "$root_release_file" | grep "^$project_name:" | cut -d':' -f2- | xargs)
    
            if [ -z "$dest_path" ]; then
              echo "$project_name not defined in $root_release_file. Skipping."
              skipped_count=$((skipped_count + 1))
              continue
            fi
    
            echo "Copying $(basename "$jar_file") to target-repo/$dest_path"
            mkdir -p "target-repo/$dest_path"
            cp "$jar_file" "target-repo/$dest_path/"
            success_count=$((success_count + 1))
          done
    
          cd target-repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
    
          if git status --porcelain | grep .; then
            echo "Committing and pushing $success_count JAR(s)..."
            git add .
            git commit -m "Update tools: auto-built JARs [${{ github.sha }}]"
            git push origin feature/tools_updates
          else
            echo "No changes to commit. ($skipped_count project(s) skipped)"
          fi
    